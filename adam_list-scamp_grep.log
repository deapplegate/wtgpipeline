3SEC.py:                    SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
3SEC.py:                    SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
3SEC.py:                            command = 'scamp ' + filtcatname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
OUT-adam_do_photometry-ONLYrot1-STARS_SDSS.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
OUT-cp_aux_data-DARK_2014-2016.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
OUT-cp_aux_data-DARK_2014-2016.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
OUT-cp_aux_data-DARK_2014-2016.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
OUT-cp_aux_data-DARK_2014-2016.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
OUT-cp_aux_data-DARK_2014-2016.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
OUT-cp_aux_data-DARK_2014-2016.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
OUT-cp_aux_data-DARK_2014-2016.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
OUT-cp_aux_data-DARK_2014-2016.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
OUT-cp_aux_data-DARK_2014-2016.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
OUT-cp_aux_data-DARK_2014-2016.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
OUT-cp_aux_data-DARK_2014-2016.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
OUT-cp_aux_data-DARK_2014-2016.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
OUT-cp_aux_data-DARK_2014-2016.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
OUT-cp_aux_data-DARK_2014-2016.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
adam_annoyances_progs_output.log:create_scamp_astrom_astrom_photom.sh
adam_annoyances_progs_output.log:do_Subaru_coadd_template_scamp.sh
adam_backup_coadds.py:	headers_path=backdir+filter+"_headers_scamp_photom_2MASS"
adam_backup_coadds.py:	headers=glob.glob('%s/%s/SCIENCE/headers_scamp_photom_2MASS/*.head' % (maindir,filter))
adam_backup_coadds.py:	headers_path=backdir+filter+"_headers_scamp_2MASS"
adam_backup_coadds.py:	headers=glob.glob('%s/%s/SCIENCE/headers_scamp_2MASS/*.head' % (maindir,filter))
adam_backup_coadds.py:astromdir=maindir+"W-J-B/SCIENCE/astrom_photom_scamp_2MASS/"
adam_backup_coadds.py:backdirastrom=backdir+"astrom_photom_scamp_2MASS/"
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:#####scampstatus: run_scamp #####
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:2698:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:def check_scamp(cluster):
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:def prep_scamp(info=None):
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:def run_scamp(OBJNAME=None,fix=False):
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where (checkedoff is null or checkedoff!="yes") and scampstatus is null group by c.objname order by rand()'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where c.' + prefix + 'scampstatus is null and t.fix="yes" group by c.objname order by rand()'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:            commandst = 'update clusters_db set ' + prefix + 'scampstatus="started ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:            #upperlimit = prep_scamp(dtop2['info'])
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:                    upperlimit = prep_scamp(dtop2['info'])
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="finished" where objname="' + dtop2['objname'] + '"'
adam_notes-calc_test_save-slr-run_diag-and-IMPORTANT_photoz_notes.log:                commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
adam_notes-coherent_shifts-ldac_hist.log:#cd /nfs/slac/g/ki/ki18/anja/SUBARU/MACS0416-24/W-J-B/SCIENCE/astrom_photom_scamp_2MASS/cat_photom
adam_notes-coherent_shifts.log:1.) make sure we're using the right header files (i.e. the ones from headers_scamp_photom_2MASS, not headers_scamp_2MASS)
adam_notes-coherent_shifts.log:	W-J-B/SCIENCE/astrom_photom_scamp_2MASS/{cat,headers,plots}
adam_notes-coherent_shifts.log:	W-J-B/SCIENCE/cat_scamp/
adam_notes-coherent_shifts.log:	W-C-RC/SCIENCE/cat_scamp/
adam_notes-coherent_shifts.log:	W-S-Z+/SCIENCE/cat_scamp/
adam_notes-coherent_shifts.log:	W-J-B/SCIENCE/headers_scamp_2MASS/
adam_notes-coherent_shifts.log:	W-C-RC/SCIENCE/headers_scamp_2MASS/
adam_notes-coherent_shifts.log:	W-S-Z+/SCIENCE/headers_scamp_2MASS/
adam_notes-coherent_shifts.log:	W-J-B/SCIENCE/astrom_photom_scamp_2MASS/{cat_photom,headers_photom,plots_photom}
adam_notes-coherent_shifts.log:	W-J-B/SCIENCE/cat_scampIC/
adam_notes-coherent_shifts.log:	W-C-RC/SCIENCE/cat_scampIC/
adam_notes-coherent_shifts.log:	W-S-Z+/SCIENCE/cat_scampIC/
adam_notes-coherent_shifts.log:	W-J-B/SCIENCE/headers_scamp_photom_2MASS/
adam_notes-coherent_shifts.log:	W-C-RC/SCIENCE/headers_scamp_photom_2MASS/
adam_notes-coherent_shifts.log:	W-S-Z+/SCIENCE/headers_scamp_photom_2MASS/
adam_notes-coherent_shifts.log:yy/nfs/slac/g/ki/ki18/anja/SUBARU/MACS0416-24$ ls -lru W-C-RC/SCIENCE/headers_scamp_2MASS/SUPA0125906_4.head W-C-RC/SCIENCE/headers_scamp_photom_2MASS/SUPA0125906_4.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright 3917 Mar 12 22:01 W-C-RC/SCIENCE/headers_scamp_photom_2MASS/SUPA0125906_4.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright 3848 Mar 13 00:06 W-C-RC/SCIENCE/headers_scamp_2MASS/SUPA0125906_4.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3917 Mar  6 23:10 W-J-B/SCIENCE/headers_scamp_photom_SDSS-R6/SUPA0118315_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3917 Mar  7 00:21 W-C-IC/SCIENCE/headers_scamp_photom_SDSS-R6/SUPA0118297_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3917 Mar  7 00:29 W-J-V/SCIENCE/headers_scamp_photom_SDSS-R6/SUPA0118325_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3917 Mar  7 00:30 W-S-G+/SCIENCE/headers_scamp_photom_SDSS-R6/SUPA0121582_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3917 Mar  7 00:33 W-S-Z+/SCIENCE/headers_scamp_photom_SDSS-R6/SUPA0128341_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3848 Mar  9 13:05 W-C-IC/SCIENCE/headers_scamp_SDSS-R6/SUPA0118297_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3848 Mar  9 13:06 W-C-RC/SCIENCE/headers_scamp_SDSS-R6/SUPA0046908_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3848 Mar  9 13:07 W-J-B/SCIENCE/headers_scamp_SDSS-R6/SUPA0118315_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3848 Mar  9 13:07 W-J-V/SCIENCE/headers_scamp_SDSS-R6/SUPA0118325_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3848 Mar  9 13:08 W-S-Z+/SCIENCE/headers_scamp_SDSS-R6/SUPA0128341_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3917 Mar  9 16:32 W-C-RC/SCIENCE/headers_scamp_photom_SDSS-R6/SUPA0046908_3.head
adam_notes-coherent_shifts.log:-rw-r--r-- 1 awright ki 3848 Mar 13 18:08 W-S-G+/SCIENCE/headers_scamp_SDSS-R6/SUPA0121582_3.head
adam_notes-coherent_shifts.log:look at xml file: firefox /nfs/slac/g/ki/ki18/anja/SUBARU/MACS0416-24/W-J-B/SCIENCE/astrom_photom_scamp_2MASS/plots_photom/adam_MACS0416-24_scamp.xml &
adam_notes-coherent_shifts.log:ldacfilter -i //nfs/slac/g/ki/ki18/anja/SUBARU/MACS0416-24/W-J-B/SCIENCE/cat_scampIC/SUPA0125898_2OCF.cat.tmp -t LDAC_OBJECTS -c '(((((FLAGS<20))AND(B_IMAGE>1.2))AND(IMAFLAGS_ISO<97))AND(MAX_TOTAL<23000));' -o SUPA0125898_2OCF.ldac
adam_notes-coherent_shifts.log:#made by:paste cat_scampIC.txt cat_photom.txt | awk 'BEGIN{print "file","cat_scampIC_Nlines","cat_photom_Nlines"}{print $1,$2,$4}' | column -t 
adam_notes-coherent_shifts.log:file                  cat_scampIC_Nlines  cat_photom_Nlines
adam_notes-do_Subaru_register_4batch-child_scripts.log:./update_config_header.sh ./create_astromcats_scamp_para.sh ./create_astromcats_scampIC_para.sh ./create_scamp_astrom_photom.sh ./create_scamp_photom.sh
adam_notes-do_Subaru_register_4batch-child_scripts.log:./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
adam_notes-do_Subaru_register_4batch-child_scripts.log:./create_astromcats_scampIC_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
adam_notes-do_Subaru_register_4batch-child_scripts.log:./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
adam_notes-do_Subaru_register_4batch-child_scripts.log:./create_scamp_photom.sh ${LINE} ${THRESH} ${ASTROMETRYCAT}
adam_notes-potentially_useful_files.log:create_astromcats_scampIC_para.sh
adam_notes-potentially_useful_files.log:create_astromcats_scamp_para.sh
adam_notes-potentially_useful_files.log:create_scamp_astrom_astrom_photom.sh
adam_notes-potentially_useful_files.log:create_scamp_astrom_photom.sh
adam_notes-potentially_useful_files.log:create_scamp_photom.sh
adam_notes-potentially_useful_files.log:do_Subaru_coadd_template_scamp.sh
adam_notes-potentially_useful_files.log:scampcat.py
adam_notes-svn_maybe_not_needed_files.log:scamp.py
adam_notes-svn_maybe_not_needed_files.log:scamp_code.py
adam_notes-svn_not_under_version_control_files.log:scamp.xsl
adam_notes-svn_useful.log:create_astromcats_scampIC_para.sh
adam_notes-svn_useful.log:create_astromcats_scamp_para.sh
adam_notes-svn_useful.log:create_scamp_astrom_astrom_photom.sh
adam_notes-svn_useful.log:create_scamp_astrom_photom.sh
adam_notes-svn_useful.log:create_scamp_photom.sh
adam_notes-svn_useful.log:do_Subaru_coadd_template_scamp.sh
adam_notes-svn_useful.log:scampcat.py
adam_notes-where_sne_shows_up.log:adam_tmp_calc_test_save.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:adam_tmp_calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:adam_tmp_calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:adam_tmp_calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:adam_tmp_calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.nov23.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.nov23.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
adam_notes-where_sne_shows_up.log:calc_test_save.ppgplot.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.ppgplot.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
adam_notes-where_sne_shows_up.log:calc_test_save.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:calc_test_save.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
adam_notes-where_sne_shows_up.log:fix_hdfn_flag.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:fix_hdfn_flag.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
adam_notes-where_sne_shows_up.log:pat.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:pat.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
adam_notes-where_sne_shows_up.log:sdss_slr.fieldID.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:sdss_slr.py:                #os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:sdss_slr.save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_notes-where_sne_shows_up.log:temp2.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
adam_pipeline_notes.sh:#adam-CHECK# after astrometry call check the output plots in /nfs/slac/g/ki/ki18/anja/SUBARU/${cluster}/${filter}/SCIENCE/astrom_scamp_2MASS/plots
adam_pipeline_notes.sh:#adam-CHECK# check the output plots in /nfs/slac/g/ki/ki18/anja/SUBARU/${cluster}/${filter}/SCIENCE/astrom_photom_scamp_2MASS/plots
adam_svnlogger.log:create_astromcats_scampIC_para.sh
adam_svnlogger.log:create_astromcats_scamp_para.sh
adam_svnlogger.log:create_scamp_astrom_astrom_photom.sh
adam_svnlogger.log:create_scamp_astrom_photom.sh
adam_svnlogger.log:create_scamp_photom.sh
adam_svnlogger.log:do_Subaru_coadd_template_scamp.sh
adam_svnlogger.log:scamp.xsl
adam_svnlogger.log:scampcat.py
bonnpipeline_scripts-all.log:scamp.py
bonnpipeline_scripts-all.log:scamp_code.py
bonnpipeline_scripts-all.log:scampcat.py
bonnpipeline_scripts-all.log:do_Subaru_coadd_template_scamp.sh
bonnpipeline_scripts-all.log:create_astromcats_scamp_para.sh
bonnpipeline_scripts-all.log:create_astromcats_scampIC_para.sh
bonnpipeline_scripts-all.log:create_scamp_astrom_astrom_photom.sh
bonnpipeline_scripts-all.log:create_scamp_astrom_photom.sh
bonnpipeline_scripts-all.log:create_scamp_photom.sh
bonnpipeline_scripts-non-adam.log:scamp.py
bonnpipeline_scripts-non-adam.log:scamp_code.py
bonnpipeline_scripts-non-adam.log:scampcat.py
bonnpipeline_scripts-non-adam.log:do_Subaru_coadd_template_scamp.sh
bonnpipeline_scripts-non-adam.log:create_astromcats_scamp_para.sh
bonnpipeline_scripts-non-adam.log:create_astromcats_scampIC_para.sh
bonnpipeline_scripts-non-adam.log:create_scamp_astrom_astrom_photom.sh
bonnpipeline_scripts-non-adam.log:create_scamp_astrom_photom.sh
bonnpipeline_scripts-non-adam.log:create_scamp_photom.sh
calc_resam.py:                    SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_resam.py:                    SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test.old.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test.old.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params # not a zero!!!!!
calc_test.save.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test.save.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.6.25.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.6.25.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.6.25.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.6.25.py:        vecs['good_scamp'] = []
calc_test_save.6.25.py:                    vecs['good_scamp'].append(1)
calc_test_save.6.25.py:                    vecs['good_scamp'].append(0)
calc_test_save.6.25.py:            print vecs['good_scamp']
calc_test_save.6.25.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.6.25.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.6.25.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.6.25.py:                            for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.6.25.py:                                command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.nov23.py:def check_scamp(cluster):
calc_test_save.nov23.py:        catlist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scamp/*.cat' )
calc_test_save.nov23.py:            file = f.replace('cat_scamp','cat_scampIC').replace('.cat','*.cat')
calc_test_save.nov23.py:                os.system('dfits ' + file.replace('/cat_scampIC','').replace('.cat','.fits') + ' | fitsort BADCCD')
calc_test_save.nov23.py:        catIClist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scampIC/*.cat' )
calc_test_save.nov23.py:def prep_scamp(info=None):
calc_test_save.nov23.py:def run_scamp(OBJNAME=None):
calc_test_save.nov23.py:            command='SELECT * from clusters_db c join try_db t on c.objname=t.objname where (checkedoff is null or checkedoff!="yes") and scampstatus is null group by c.objname order by rand()'  
calc_test_save.nov23.py:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
calc_test_save.nov23.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.nov23.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
calc_test_save.nov23.py:            commandst = 'update clusters_db set scampstatus="started ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.nov23.py:                    upperlimit = prep_scamp(dtop2['info'])
calc_test_save.nov23.py:                #upperlimit = prep_scamp(dtop2['info'])
calc_test_save.nov23.py:                    commandst = 'update clusters_db set scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.nov23.py:                    commandst = 'update clusters_db set scampstatus="finished" where objname="' + dtop2['objname'] + '"'
calc_test_save.nov23.py:                commandst = 'update clusters_db set scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.nov23.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.nov23.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.nov23.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.nov23.py:        vecs['good_scamp'] = []
calc_test_save.nov23.py:                    vecs['good_scamp'].append(1)
calc_test_save.nov23.py:                    vecs['good_scamp'].append(0)
calc_test_save.nov23.py:            print vecs['good_scamp']
calc_test_save.nov23.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.nov23.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.nov23.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.nov23.py:                                        for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.nov23.py:                                            command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.nov23.py:    #run_scamp()
calc_test_save.olddb.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.olddb.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.olddb.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.olddb.py:        vecs['good_scamp'] = []
calc_test_save.olddb.py:                    vecs['good_scamp'].append(1)
calc_test_save.olddb.py:                    vecs['good_scamp'].append(0)
calc_test_save.olddb.py:            print vecs['good_scamp']
calc_test_save.olddb.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.olddb.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.olddb.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.olddb.py:                            for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.olddb.py:                                command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.ppgplot.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.ppgplot.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.ppgplot.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.ppgplot.py:        vecs['good_scamp'] = []
calc_test_save.ppgplot.py:                    vecs['good_scamp'].append(1)
calc_test_save.ppgplot.py:                    vecs['good_scamp'].append(0)
calc_test_save.ppgplot.py:            #print vecs['good_scamp']
calc_test_save.ppgplot.py:                        #if vecs['good_scamp'][cn]!= 1: 
calc_test_save.ppgplot.py:def check_scamp(cluster):
calc_test_save.ppgplot.py:        catlist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scamp/*.cat' )
calc_test_save.ppgplot.py:            file = f.replace('cat_scamp','cat_scampIC').replace('.cat','*.cat')
calc_test_save.ppgplot.py:                os.system('dfits ' + file.replace('/cat_scampIC','').replace('.cat','.fits') + ' | fitsort BADCCD')
calc_test_save.ppgplot.py:        catIClist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scampIC/*.cat' )
calc_test_save.ppgplot.py:def prep_scamp(info=None):
calc_test_save.ppgplot.py:def run_scamp(OBJNAME=None,fix=True):
calc_test_save.ppgplot.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where (checkedoff is null or checkedoff!="yes") and scampstatus is null group by c.objname order by rand()'  
calc_test_save.ppgplot.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where c.' + prefix + 'scampstatus is null and t.fix="yes" group by c.objname order by rand()'  
calc_test_save.ppgplot.py:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
calc_test_save.ppgplot.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.ppgplot.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
calc_test_save.ppgplot.py:            commandst = 'update clusters_db set ' + prefix + 'scampstatus="started ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.ppgplot.py:            #upperlimit = prep_scamp(dtop2['info'])
calc_test_save.ppgplot.py:                        command = 'rm -rf ' + os.environ['subdir'] + '/' + dtop2['objname'] + '/' + filter + '/SCIENCE/cat_scampIC'
calc_test_save.ppgplot.py:                    upperlimit = prep_scamp(dtop2['info'])
calc_test_save.ppgplot.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.ppgplot.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="finished" where objname="' + dtop2['objname'] + '"'
calc_test_save.ppgplot.py:                commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.ppgplot.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.ppgplot.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.ppgplot.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.ppgplot.py:        vecs['good_scamp'] = []
calc_test_save.ppgplot.py:                    vecs['good_scamp'].append(1)
calc_test_save.ppgplot.py:                    vecs['good_scamp'].append(0)
calc_test_save.ppgplot.py:            print vecs['good_scamp']
calc_test_save.ppgplot.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.ppgplot.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.ppgplot.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.ppgplot.py:                                        for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.ppgplot.py:                                            command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.ppgplot.py:    #run_scamp() ### can't run scamp from the batch computers b/c of internet!
calc_test_save.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:            SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.py:            TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.py:            NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.py:            vecs['good_scamp'] = []
calc_test_save.py:                        vecs['good_scamp'].append(1)
calc_test_save.py:                        vecs['good_scamp'].append(0)
calc_test_save.py:                #print vecs['good_scamp']
calc_test_save.py:                                #if vecs['good_scamp'][cn]!= 1: 
calc_test_save.py:def check_scamp(cluster):
calc_test_save.py:        catlist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scamp/*.cat' )
calc_test_save.py:            file = f.replace('cat_scamp','cat_scampIC').replace('.cat','*.cat')
calc_test_save.py:                os.system('dfits ' + file.replace('/cat_scampIC','').replace('.cat','.fits') + ' | fitsort BADCCD')
calc_test_save.py:        catIClist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scampIC/*.cat' )
calc_test_save.py:def prep_scamp(info=None):
calc_test_save.py:def run_scamp(OBJNAME=None,fix=False):
calc_test_save.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where (checkedoff is null or checkedoff!="yes") and scampstatus is null group by c.objname order by rand()'  
calc_test_save.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where c.' + prefix + 'scampstatus is null and t.fix="yes" group by c.objname order by rand()'  
calc_test_save.py:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
calc_test_save.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
calc_test_save.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
calc_test_save.py:            commandst = 'update clusters_db set ' + prefix + 'scampstatus="started ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.py:            #upperlimit = prep_scamp(dtop2['info'])
calc_test_save.py:                        command = 'rm -rf ' + os.environ['subdir'] + '/' + dtop2['objname'] + '/' + filter + '/SCIENCE/cat_scampIC'
calc_test_save.py:                    upperlimit = prep_scamp(dtop2['info'])
calc_test_save.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="finished" where objname="' + dtop2['objname'] + '"'
calc_test_save.py:                commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
calc_test_save.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.py:        vecs['good_scamp'] = []
calc_test_save.py:                    vecs['good_scamp'].append(1)
calc_test_save.py:                    vecs['good_scamp'].append(0)
calc_test_save.py:            print vecs['good_scamp']
calc_test_save.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.py:                                        for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.py:                                            command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.py:    #run_scamp() ### can't run scamp from the batch computers b/c of internet!
calc_test_save.run.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.run.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.run.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.run.py:        vecs['good_scamp'] = []
calc_test_save.run.py:                    vecs['good_scamp'].append(1)
calc_test_save.run.py:                    vecs['good_scamp'].append(0)
calc_test_save.run.py:            print vecs['good_scamp']
calc_test_save.run.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.run.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.run.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.run.py:                                for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.run.py:                                    command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.save.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.save.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.save.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.save.py:        vecs['good_scamp'] = []
calc_test_save.save.py:                    vecs['good_scamp'].append(1)
calc_test_save.save.py:                    vecs['good_scamp'].append(0)
calc_test_save.save.py:            print vecs['good_scamp']
calc_test_save.save.py:                if vecs['good_scamp'][i] != 1: 
calc_test_save.save.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.save.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.save.py:                                for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.save.py:                                    command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.save1.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.save1.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.save1.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.save1.py:        vecs['good_scamp'] = []
calc_test_save.save1.py:                vecs['good_scamp'].append(1)
calc_test_save.save1.py:                vecs['good_scamp'].append(0)
calc_test_save.save1.py:        print vecs['good_scamp']
calc_test_save.save1.py:            if vecs['good_scamp'][i] != 1: 
calc_test_save.save1.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.save1.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.save1.py:                            for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.save1.py:                                command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_test_save.save2.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
calc_test_save.save2.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
calc_test_save.save2.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
calc_test_save.save2.py:        vecs['good_scamp'] = []
calc_test_save.save2.py:                vecs['good_scamp'].append(1)
calc_test_save.save2.py:                vecs['good_scamp'].append(0)
calc_test_save.save2.py:        print vecs['good_scamp']
calc_test_save.save2.py:            if vecs['good_scamp'][i] != 1: 
calc_test_save.save2.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_test_save.save2.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_test_save.save2.py:                            for file_scamp in glob(filter_dir+ '/head*'):
calc_test_save.save2.py:                                command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
calc_tmp.py:                command = 'ldaccalc -i ' + catname + ' -o ' + TEMPDIR + params['ROOT'] + '.scamp.cata -t LDAC_OBJECTS -c "(XWIN_IMAGE + ' + str(float(crpixzero['CRPIX1']) - float(crpix['CRPIX1'])) + ');" -k FLOAT -n XWIN_IMAGE_TEMP "" -c "(YWIN_IMAGE + ' + str(float(crpixzero['CRPIX2']) - float(crpix['CRPIX2'])) + ');" -k FLOAT -n YWIN_IMAGE_TEMP "" -c "(YWIN_IMAGE*0 + ' + str(params['NUM']) + ');" -k FLOAT -n CHIP "" ' 
calc_tmp.py:                command = 'ldacdelkey -i ' + TEMPDIR + params['ROOT'] + '.scamp.cata -t LDAC_OBJECTS -o ' + TEMPDIR + params['ROOT'] + '.scamp.catb -k XWIN_IMAGE YWIN_IMAGE'
calc_tmp.py:                command = 'ldacrenkey -i ' + TEMPDIR + params['ROOT'] + '.scamp.catb -t LDAC_OBJECTS -o ' + TEMPDIR + params['ROOT'] + '.scamp.catc -k XWIN_IMAGE_TEMP XWIN_IMAGE YWIN_IMAGE_TEMP YWIN_IMAGE'
calc_tmp.py:        newposlist = glob(TEMPDIR + kw + '*scamp.catc')
calc_tmp.py:        outcatscamp = TEMPDIR + 'tmppaste_' + kw + '.scampall.cat'
calc_tmp.py:        outheadscamp = TEMPDIR + 'tmppaste_' + kw + '.scampall.head'
calc_tmp.py:            command = 'ldacpaste -i ' + TEMPDIR + kw + '*scamp.cat -o ' + outcatscamp 
calc_tmp.py:            command = 'cp ' + newposlist[0] + ' ' + outcatscamp 
calc_tmp.py:        command = 'scamp ' + outcatscamp + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
calc_tmp.py:        headfile = outheadscamp
calc_tmp.py:                command = 'scamp ' + catname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
calc_tmp.save2.py:                command = 'scamp ' + catname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
calc_tmp.savefeb10.py:                    command = 'scamp ' + filtcatname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
calc_tmp.savesingle.py:                command = 'scamp ' + catname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
calc_tmpsave.py:        SDSS1 = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params   # it's not a ZERO!!!
calc_tmpsave.py:        SDSS2 = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_tmpsave.py:    vecs['good_scamp'] = []
calc_tmpsave.py:                vecs['good_scamp'].append(1)
calc_tmpsave.py:                vecs['good_scamp'].append(0)
calc_tmpsave.py:        if vecs['good_scamp'][i] != 1: 
calc_tmpsave.save.py:        SDSS1 = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params   # it's not a ZERO!!!
calc_tmpsave.save.py:        SDSS2 = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_tmpsave.save.py:    vecs['good_scamp'] = []
calc_tmpsave.save.py:                vecs['good_scamp'].append(1)
calc_tmpsave.save.py:                vecs['good_scamp'].append(0)
calc_tmpsave.save.py:        if vecs['good_scamp'][i] != 1: 
calc_tmpsave.save.py:                    SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
calc_tmpsave.save.py:                    SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_tmpsave_from_pat_dir.py:        SDSS1 = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params   # it's not a ZERO!!!
calc_tmpsave_from_pat_dir.py:        SDSS2 = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
calc_tmpsave_from_pat_dir.py:    vecs['good_scamp'] = []
calc_tmpsave_from_pat_dir.py:                vecs['good_scamp'].append(1)
calc_tmpsave_from_pat_dir.py:                vecs['good_scamp'].append(0)
calc_tmpsave_from_pat_dir.py:        if vecs['good_scamp'][i] != 1: 
coadd_ubercheck.py:#import check_scamp_dates
coadd_ubercheck.py:def check_scamp_dates(cluster, filt,v):
coadd_ubercheck.py:    # dates of the scamp headders against the
coadd_ubercheck.py:    #  - and that the early data has been scamped later than Apr 1.
coadd_ubercheck.py:        filenames=subdir+'/'+cluster+'/'+filt+'/SCIENCE/headers_scamp_photom_'+db+'/*'
coadd_ubercheck.py:                              ' Early data: need to rerun scamp '+\
coadd_ubercheck.py:                         cluster+'/'+filt+'/SCIENCE/headers_scamp_photom_'+\
coadd_ubercheck.py:                         cluster+'/'+filt+'/SCIENCE/headers_scamp_photom_'+\
coadd_ubercheck.py:            print 'Checking scamp dates', cluster, filt
coadd_ubercheck.py:        check_scamp_dates(cluster, filt,v)
create_astromcats_scampIC_para.sh:# CVSId: $Id: create_astromcats_scampIC_para.sh,v 1.1 2009-06-30 00:01:06 anja Exp $
create_astromcats_scampIC_para.sh:if [ ! -d "/$1/$2/cat_scampIC" ]; then
create_astromcats_scampIC_para.sh:  mkdir /$1/$2/cat_scampIC
create_astromcats_scampIC_para.sh:                echo "adam-Error in create_astromcats_scampIC_para.sh: something wrong with rms_fwhm_dt_ft its supposed to be 4 elements long, but Nelements=" $Nelements
create_astromcats_scampIC_para.sh:                echo "adam-Error in create_astromcats_scampIC_para.sh: rms_fwhm_dt_ft=" ${rms_fwhm_dt_ft[@]}
create_astromcats_scampIC_para.sh:                echo "adam-Error in create_astromcats_scampIC_para.sh: TRY GETTING THINGS FROM HEADER INSTEAD!"
create_astromcats_scampIC_para.sh:                                echo "adam-Error in create_astromcats_scampIC_para.sh: SEEING header keyword and MYSEEING header keyword isn't in " ${file}
create_astromcats_scampIC_para.sh:                echo "adam-Error in create_astromcats_scampIC_para.sh: MYSEEING header keyword cannot be found! calculating fwhm using get_seeing method."
create_astromcats_scampIC_para.sh:  		       -CATALOG_NAME /$1/$2/cat_scampIC/${BASE}.cat\
create_astromcats_scamp_para.sh:# CVSId: $Id: create_astromcats_scamp_para.sh,v 1.7 2009-06-25 22:22:16 anja Exp $
create_astromcats_scamp_para.sh:if [ ! -d "/${MAINDIR}/${SCIENCEDIR}/cat_scamp" ]; then
create_astromcats_scamp_para.sh:  mkdir /${MAINDIR}/${SCIENCEDIR}/cat_scamp
create_astromcats_scamp_para.sh:  		       -CATALOG_NAME /${MAINDIR}/${SCIENCEDIR}/cat_scamp/${BASE}.cat\
create_astromcats_scamp_para.sh:	#  	               -CHECKIMAGE_NAME /${MAINDIR}/${SCIENCEDIR}/cat_scamp/${BASE}.segmentation.fits
create_scamp_astrom_astrom_photom.sh:# CVSID: $Id: create_scamp_astrom_astrom_photom.sh,v 1.6 2009-08-07 00:15:25 anja Exp $
create_scamp_astrom_astrom_photom.sh:# File Name:           create_scamp_astrom_photom.sh
create_scamp_astrom_astrom_photom.sh:#                      calibration of THELI sets with scamp V1.4.0-V1.4.6
create_scamp_astrom_astrom_photom.sh:# - I appended NTHREADS to the scamp command line
create_scamp_astrom_astrom_photom.sh:#   scamp catalogues
create_scamp_astrom_astrom_photom.sh:# 'scamp' is run with the '-MOSAIC_TYPE FIX_FOCALPLANE' option. 
create_scamp_astrom_astrom_photom.sh:# now I used the scamp value which is, however, scaled to a fixed
create_scamp_astrom_astrom_photom.sh:# magnitude (scamp config file). This value is not consistent with
create_scamp_astrom_astrom_photom.sh:# The directory names where scamp performs its actions carry the name 
create_scamp_astrom_astrom_photom.sh:    echo "    create_scamp_astrom_photom.sh"
create_scamp_astrom_astrom_photom.sh:    echo "    calibration of THELI sets with Emanuel Bertins scamp program. The"
create_scamp_astrom_astrom_photom.sh:    echo "    script was tested against scamp V1.4.6; The scamp program itself"
create_scamp_astrom_astrom_photom.sh:    echo "    header files in a \${SET}/headers_scamp_\${!#} directory (the \${!#}"
create_scamp_astrom_astrom_photom.sh:    echo "    directly be used for image co-addition.  To use the scamp headers"
create_scamp_astrom_astrom_photom.sh:    echo "    headers_scamp_..' option."
create_scamp_astrom_astrom_photom.sh:    echo "    astrometric catalogue supported by scamp."
create_scamp_astrom_astrom_photom.sh:    echo "    directory \${SET}/astrom_photom_scamp (of the first given image"
create_scamp_astrom_astrom_photom.sh:    echo "    (1) The script calls the Python script 'scampcat.py' which creates"
create_scamp_astrom_astrom_photom.sh:    echo "        scamp MEF exposure catalogues from the individual THELI chip "
create_scamp_astrom_astrom_photom.sh:    echo "    (2) scamp uses the configuration file 'scamp_astrom_photom.scamp'"
create_scamp_astrom_astrom_photom.sh:    echo "        which is set to define scamp astrometric contexts on the"
create_scamp_astrom_astrom_photom.sh:    echo "        in your reduction directory. If yes, it interprets it as a scamp"
create_scamp_astrom_astrom_photom.sh:    echo "        headers. In this case scamp is run with the "
create_scamp_astrom_astrom_photom.sh:    echo "    files that scamp needs/returns and the formats needed by"
create_scamp_astrom_astrom_photom.sh:    echo "    (1) Our THELI 'runs' are called 'astrometric contexts' in the scamp"
create_scamp_astrom_astrom_photom.sh:    echo "    (2) For each multi-chip exposure scamp expects ONE object catalogue"
create_scamp_astrom_astrom_photom.sh:    echo "        for each chip. If we would feed all individual chips into scamp"
create_scamp_astrom_astrom_photom.sh:    echo "    (3) scamp outputs ONE header file with all chips for each exposure."
create_scamp_astrom_astrom_photom.sh:    echo "    (4) scamp only gives a final flux scale w.r.t. a specified zeropoint."
create_scamp_astrom_astrom_photom.sh:    echo "        the absolute calibration within scamp."
create_scamp_astrom_astrom_photom.sh:    echo "        e.g. USNOB1 (THELI), but USNO-B1 (scamp)"
create_scamp_astrom_astrom_photom.sh:    echo "    (7) scamp crashes if images with a different number of chips "
create_scamp_astrom_astrom_photom.sh:# check whether we have the external 'scamp' and 'aclient' programs at all:
create_scamp_astrom_astrom_photom.sh:    echo "You need the external 'scamp' AND 'aclient' programs to"
create_scamp_astrom_astrom_photom.sh:# Test existence of image directory(ies) and create headers_scamp
create_scamp_astrom_astrom_photom.sh:      if [ -d /${!i}/${!j}/headers_scamp_${STARCAT} ]; then
create_scamp_astrom_astrom_photom.sh:          rm -rf /${!i}/${!j}/headers_scamp_${STARCAT}
create_scamp_astrom_astrom_photom.sh:      mkdir /${!i}/${!j}/headers_scamp_${STARCAT}
create_scamp_astrom_astrom_photom.sh:# a astrom_photom_scamp subdirectory:
create_scamp_astrom_astrom_photom.sh:test -d "astrom_photom_scamp_${STARCAT}" && rm -rf astrom_photom_scamp_${STARCAT}
create_scamp_astrom_astrom_photom.sh:mkdir -p astrom_photom_scamp_${STARCAT}/cat
create_scamp_astrom_astrom_photom.sh:mkdir astrom_photom_scamp_${STARCAT}/headers
create_scamp_astrom_astrom_photom.sh:mkdir astrom_photom_scamp_${STARCAT}/plots
create_scamp_astrom_astrom_photom.sh:cd astrom_photom_scamp_${STARCAT}/cat
create_scamp_astrom_astrom_photom.sh:  FILES=`${P_FIND} /${!i}/${!j}/cat_scamp/ -maxdepth 1 -name \*.cat`
create_scamp_astrom_astrom_photom.sh:  # If an old scamp catalogue exists the python call below
create_scamp_astrom_astrom_photom.sh:  test -f ./${IMAGE}_scamp.cat && rm -f ./${IMAGE}_scamp.cat
create_scamp_astrom_astrom_photom.sh:	      ${DIR}/make_ahead.sh /${!j}/${!k}/astrom/$2_${INSTRUM}_${CONFIG}_${ROTATION}.dat /$1/$2/astrom_photom_scamp_${STARCAT}/astrom_${INSTRUM}_c${CONFIG}_r${ROTATION}_${IMAGE}.ahead
create_scamp_astrom_astrom_photom.sh:#  python ${S_SCAMPCAT} ${CATS} ./${IMAGE}_scamp.cat
create_scamp_astrom_astrom_photom.sh:echo "${CATS} ./${IMAGE}_scamp.cat" >> ${DIR}/catlist.txt_$$
create_scamp_astrom_astrom_photom.sh:  if [ -f /$1/$2/headers_initial/${IMAGE}_scamp.head ];then
create_scamp_astrom_astrom_photom.sh:      AHEADFILE=/$1/$2/headers_initial/${IMAGE}_scamp.head
create_scamp_astrom_astrom_photom.sh:  elif [ -f /$1/$2/astrom_photom_scamp_${STARCAT}/astrom_${INSTRUM}_c${CONFIG}_r${ROTATION}_${IMAGE}.ahead ]; then
create_scamp_astrom_astrom_photom.sh:      AHEADFILE=/$1/$2/astrom_photom_scamp_${STARCAT}/astrom_${INSTRUM}_c${CONFIG}_r${ROTATION}_${IMAGE}.ahead
create_scamp_astrom_astrom_photom.sh:  test -f ./${IMAGE}_scamp.ahead && rm -f ./${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:    if [ ! -z "${AHEADFILE}" ] && [ ${AHEADFILE} == "/$1/$2/headers_initial/${IMAGE}_scamp.head" ]; then
create_scamp_astrom_astrom_photom.sh:                   }' ${AHEADFILE} >> ${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:      echo "MISSCHIP= '${MISSCHIP}'" >> ./${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:      echo "END      "               >> ./${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:                   }' ${AHEADFILE} >> ${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:      echo "MISSCHIP= '${MISSCHIP}'" >> ./${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:      echo "END      "               >> ./${IMAGE}_scamp.ahead
create_scamp_astrom_astrom_photom.sh:NCAT=`ls -1 *_scamp.cat | wc -l`
create_scamp_astrom_astrom_photom.sh:NAHEAD=`ls -1 *_scamp.ahead | wc -l`
create_scamp_astrom_astrom_photom.sh:# now call scamp:
create_scamp_astrom_astrom_photom.sh:${P_SCAMP} `${P_FIND} ../cat/ -name \*scamp.cat` \
create_scamp_astrom_astrom_photom.sh:           -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_astrom_photom.sh:           -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_astrom_astrom_photom.sh:#${P_SCAMP} `${P_FIND} ../cat/ -name \*scamp.cat` \
create_scamp_astrom_astrom_photom.sh:#           -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_astrom_photom.sh:#           -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_astrom_astrom_photom.sh:  echo "scamp call failed !! Exiting !!"
create_scamp_astrom_astrom_photom.sh:# scamp creates the headers in the directory where the catalogs
create_scamp_astrom_astrom_photom.sh:mv ${BONN_TARGET}_scamp.xml ../plots
create_scamp_astrom_astrom_photom.sh:# estimated by scamp:
create_scamp_astrom_astrom_photom.sh:  EXPTIME=`${P_LDACTOASC} -i ../cat/${IMAGE}_scamp.cat \
create_scamp_astrom_astrom_photom.sh:  FLXSCALE=`grep FLXSCALE ${IMAGE}_scamp.head | uniq |\
create_scamp_astrom_astrom_photom.sh:  PHOTINST=`grep PHOTINST ${IMAGE}_scamp.head | uniq |\
create_scamp_astrom_astrom_photom.sh:             flxscale_scamp[NR] = $3;
create_scamp_astrom_astrom_photom.sh:# into appropriate headers_scamp directories
create_scamp_astrom_astrom_photom.sh:      sed -e 's/FLXSCALE/FLSCALE /' ${NAME}_scamp.head |\
create_scamp_astrom_astrom_photom.sh:    mv ${CATBASE[$i]}*head ${CATDIR[$i]}/headers_scamp_${STARCAT}
create_scamp_astrom_photom.sh:# CVSID: $Id: create_scamp_astrom_photom.sh,v 1.36 2010-10-05 02:29:02 anja Exp $
create_scamp_astrom_photom.sh:# File Name:           create_scamp_astrom_photom.sh
create_scamp_astrom_photom.sh:#                      calibration of THELI sets with scamp V1.4.0-V1.4.6
create_scamp_astrom_photom.sh:# - I appended NTHREADS to the scamp command line
create_scamp_astrom_photom.sh:#   scamp catalogues
create_scamp_astrom_photom.sh:# 'scamp' is run with the '-MOSAIC_TYPE FIX_FOCALPLANE' option. 
create_scamp_astrom_photom.sh:# now I used the scamp value which is, however, scaled to a fixed
create_scamp_astrom_photom.sh:# magnitude (scamp config file). This value is not consistent with
create_scamp_astrom_photom.sh:# The directory names where scamp performs its actions carry the name 
create_scamp_astrom_photom.sh:    echo "    create_scamp_astrom_photom.sh"
create_scamp_astrom_photom.sh:    echo "    calibration of THELI sets with Emanuel Bertins scamp program. The"
create_scamp_astrom_photom.sh:    echo "    script was tested against scamp V1.4.6; The scamp program itself"
create_scamp_astrom_photom.sh:    echo "    header files in a \${SET}/headers_scamp_\${!#} directory (the \${!#}"
create_scamp_astrom_photom.sh:    echo "    directly be used for image co-addition.  To use the scamp headers"
create_scamp_astrom_photom.sh:    echo "    headers_scamp_..' option."
create_scamp_astrom_photom.sh:    echo "    astrometric catalogue supported by scamp."
create_scamp_astrom_photom.sh:    echo "    directory \${SET}/astrom_photom_scamp (of the first given image"
create_scamp_astrom_photom.sh:    echo "    (1) The script calls the Python script 'scampcat.py' which creates"
create_scamp_astrom_photom.sh:    echo "        scamp MEF exposure catalogues from the individual THELI chip "
create_scamp_astrom_photom.sh:    echo "    (2) scamp uses the configuration file 'scamp_astrom_photom.scamp'"
create_scamp_astrom_photom.sh:    echo "        which is set to define scamp astrometric contexts on the"
create_scamp_astrom_photom.sh:    echo "        in your reduction directory. If yes, it interprets it as a scamp"
create_scamp_astrom_photom.sh:    echo "        headers. In this case scamp is run with the "
create_scamp_astrom_photom.sh:    echo "    files that scamp needs/returns and the formats needed by"
create_scamp_astrom_photom.sh:    echo "    (1) Our THELI 'runs' are called 'astrometric contexts' in the scamp"
create_scamp_astrom_photom.sh:    echo "    (2) For each multi-chip exposure scamp expects ONE object catalogue"
create_scamp_astrom_photom.sh:    echo "        for each chip. If we would feed all individual chips into scamp"
create_scamp_astrom_photom.sh:    echo "    (3) scamp outputs ONE header file with all chips for each exposure."
create_scamp_astrom_photom.sh:    echo "    (4) scamp only gives a final flux scale w.r.t. a specified zeropoint."
create_scamp_astrom_photom.sh:    echo "        the absolute calibration within scamp."
create_scamp_astrom_photom.sh:    echo "        e.g. USNOB1 (THELI), but USNO-B1 (scamp)"
create_scamp_astrom_photom.sh:    echo "    (7) scamp crashes if images with a different number of chips "
create_scamp_astrom_photom.sh:# check whether we have the external 'scamp' and 'aclient' programs at all:
create_scamp_astrom_photom.sh:    echo "You need the external 'scamp' AND 'aclient' programs to"
create_scamp_astrom_photom.sh:# Test existence of image directory(ies) and create headers_scamp
create_scamp_astrom_photom.sh:      if [ -d /${!i}/${!j}/headers_scamp_${STARCAT} ]; then
create_scamp_astrom_photom.sh:          rm -rf /${!i}/${!j}/headers_scamp_${STARCAT}
create_scamp_astrom_photom.sh:      mkdir /${!i}/${!j}/headers_scamp_${STARCAT}
create_scamp_astrom_photom.sh:# a astrom_photom_scamp subdirectory:
create_scamp_astrom_photom.sh:test -d "astrom_photom_scamp_${STARCAT}" && rm -rf astrom_photom_scamp_${STARCAT}
create_scamp_astrom_photom.sh:mkdir -p astrom_photom_scamp_${STARCAT}/cat
create_scamp_astrom_photom.sh:mkdir astrom_photom_scamp_${STARCAT}/headers
create_scamp_astrom_photom.sh:mkdir astrom_photom_scamp_${STARCAT}/plots
create_scamp_astrom_photom.sh:cd astrom_photom_scamp_${STARCAT}/cat
create_scamp_astrom_photom.sh:  FILES=`${P_FIND} /${!i}/${!j}/cat_scamp/ -maxdepth 1 -name \*.cat`
create_scamp_astrom_photom.sh:		# If an old scamp catalogue exists the python call below
create_scamp_astrom_photom.sh:		test -f ./${IMAGE}_scamp.cat && rm -f ./${IMAGE}_scamp.cat
create_scamp_astrom_photom.sh:		#python ${S_SCAMPCAT} ${CATS} ./${IMAGE}_scamp.cat
create_scamp_astrom_photom.sh:		echo "${CATS} ./${IMAGE}_scamp.cat" >> ${DIR}/catlist.txt_$$
create_scamp_astrom_photom.sh:		test -f ./${IMAGE}_scamp.ahead && rm -f ./${IMAGE}_scamp.ahead
create_scamp_astrom_photom.sh:				       }' ${AHEADFILE} >> ${IMAGE}_scamp.ahead
create_scamp_astrom_photom.sh:			  echo "MISSCHIP= '${MISSCHIP}'" >> ./${IMAGE}_scamp.ahead
create_scamp_astrom_photom.sh:			  echo "END      "               >> ./${IMAGE}_scamp.ahead
create_scamp_astrom_photom.sh:	echo "adam-Error: something wrong with python scamp call. Checkout ${DIR}/catlist.txt_$$"
create_scamp_astrom_photom.sh:# now call scamp:
create_scamp_astrom_photom.sh:## scamp mode settings
create_scamp_astrom_photom.sh:scamp_mode_instrum_star="-STABILITY_TYPE INSTRUMENT -ASTREF_CATALOG ${STARCAT} " #default
create_scamp_astrom_photom.sh:scamp_mode_exp_star="-STABILITY_TYPE EXPOSURE -ASTREF_CATALOG ${STARCAT} "
create_scamp_astrom_photom.sh:scamp_mode_instrum_ref="-STABILITY_TYPE INSTRUMENT -ASTREF_CATALOG FILE -ASTREFCENT_KEYS X_WORLD,Y_WORLD -ASTREFERR_KEYS ERRA_WORLD,ERRB_WORLD,ERRTHETA_WORLD -ASTREFMAG_KEY MAG_AUTO "
create_scamp_astrom_photom.sh:scamp_mode_exp_ref="-STABILITY_TYPE EXPOSURE -ASTREF_CATALOG FILE -ASTREFCENT_KEYS X_WORLD,Y_WORLD -ASTREFERR_KEYS ERRA_WORLD,ERRB_WORLD,ERRTHETA_WORLD -ASTREFMAG_KEY MAG_AUTO "
create_scamp_astrom_photom.sh:scamp_mode_use=${scamp_mode_instrum_star} #default
create_scamp_astrom_photom.sh:#adam-IMPORTANT# If BACKMASK images look like crap, then I should first try out scamp_mode_use=${scamp_mode_exp_star}
create_scamp_astrom_photom.sh:#adam-IMPORTANT# If still bad, then make a coadd.fits with only the good looking exposures, make a refcat from this, and use scamp_mode_use=${scamp_mode_exp_ref}
create_scamp_astrom_photom.sh:#MACS0416# scamp_mode_use=${scamp_mode_exp_ref}
create_scamp_astrom_photom.sh:echo "scamp_mode_use=" $scamp_mode_use
create_scamp_astrom_photom.sh:${P_SCAMP} `${P_FIND} ../cat/ -name \*scamp.cat` \
create_scamp_astrom_photom.sh:           -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_photom.sh:           -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_astrom_photom.sh:           -ASTREF_WEIGHT 1 ${scamp_mode_use}
create_scamp_astrom_photom.sh:#refcat_scamp_call# ${P_SCAMP} `${P_FIND} ../cat/ -name \*scamp.cat` \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -ASTRINSTRU_KEY FILTER,INSTRUM,CONFIG,ROTATION,MISSCHIP,PPRUN \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -CDSCLIENT_EXEC ${P_ACLIENT} \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -NTHREADS ${NPARA} ${MOSAICTYPE} \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -MAGZERO_INTERR 0.1 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -MAGZERO_REFERR 0.1 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -POSITION_MAXERR 5.0 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -POSANGLE_MAXERR 30.0 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -SN_THRESHOLDS 3,100 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -FLAGS_MASK 0x00e0 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -MATCH_NMAX 10000 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -CROSSID_RADIUS 0.3 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -PIXSCALE_MAXERR 1.03 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -STABILITY_TYPE EXPOSURE \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -DISTORT_DEGREES 3 \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -ASTREF_CATALOG FILE \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -ASTREFCENT_KEYS X_WORLD,Y_WORLD \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -ASTREFERR_KEYS ERRA_WORLD,ERRB_WORLD,ERRTHETA_WORLD \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -ASTREFMAG_KEY MAG_AUTO \
create_scamp_astrom_photom.sh:#refcat_scamp_call#         -ASTREF_WEIGHT 1
create_scamp_astrom_photom.sh:#scamp_doesnt_recognize# -ASTREF_CATNAME /nfs/slac/g/ki/ki18/anja/SUBARU/compare_astrom_offsets/coadd_W-C-RC_only_5_good_ims/good5_W-C-RC_final.cat \
create_scamp_astrom_photom.sh:#scamp_doesnt_recognize# -ASTREFMAGERR_KEY MAGERR_AUTO
create_scamp_astrom_photom.sh:#adam-tmp# this is the standard operating procedure, remove all of the #usual_scamp_call# stuff before the next cluster 
create_scamp_astrom_photom.sh:#usual_scamp_call# ${P_SCAMP} `${P_FIND} ../cat/ -name \*scamp.cat` \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -ASTRINSTRU_KEY FILTER,INSTRUM,CONFIG,ROTATION,MISSCHIP,PPRUN \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -CDSCLIENT_EXEC ${P_ACLIENT} \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -ASTREF_CATALOG ${STARCAT} \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -NTHREADS ${NPARA} ${MOSAICTYPE} \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -MAGZERO_INTERR 0.1 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -MAGZERO_REFERR 0.1 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -POSITION_MAXERR 5.0 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -POSANGLE_MAXERR 30.0 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -SN_THRESHOLDS 3,100 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -FLAGS_MASK 0x00e0 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -MATCH_NMAX 10000 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -CROSSID_RADIUS 0.3 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -PIXSCALE_MAXERR 1.03 \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -STABILITY_TYPE INSTRUMENT \
create_scamp_astrom_photom.sh:#usual_scamp_call#            -DISTORT_DEGREES 3
create_scamp_astrom_photom.sh:#adam_scamp_comments# THESE ARE THE NOTES I'VE ASSEMBLED WHILE TRYING TO FIX SCAMP ISSUES FOR MACS0416-24:
create_scamp_astrom_photom.sh:#adam_scamp_comments# NOTE: If I was going to try fixing these issues again, first I would look at/run the stuff in #old_scamp_comments# and the stuff in create_scamp_astrom_astrom_photom.sh FIRST, who knows, they might actually be there for a reason!
create_scamp_astrom_photom.sh:#adam_scamp_comments# 	THEN i would try out the suggestions below
create_scamp_astrom_photom.sh:#adam_scamp_comments# #orig#           -CROSSID_RADIUS 0.2 \
create_scamp_astrom_photom.sh:#adam_scamp_comments# #orig#           -PIXSCALE_MAXERR 1.02 \
create_scamp_astrom_photom.sh:#adam_scamp_comments# #def#           -CROSSID_RADIUS 2.0 \
create_scamp_astrom_photom.sh:#adam_scamp_comments# #def#           -PIXSCALE_MAXERR 1.20 \
create_scamp_astrom_photom.sh:#adam_scamp_comments# 
create_scamp_astrom_photom.sh:#adam_scamp_comments# # might want to try: ASTREF_WEIGHT change?
create_scamp_astrom_photom.sh:#adam_scamp_comments# # might want to try: ASTREF_CATALOG=USNO-B1 or ASTREF_BAND=REDDEST
create_scamp_astrom_photom.sh:#adam_scamp_comments# # might want to try: DISTORT_KEYS           X_IMAGE,Y_IMAGE,:AIRMASS
create_scamp_astrom_photom.sh:#adam_scamp_comments# # might want to try: MOSAIC_TYPE change?
create_scamp_astrom_photom.sh:#adam_scamp_comments# # might want to try: CROSSID_RADIUS or PIXSCALE_MAXERR or POSANGLE_MAXERR change?
create_scamp_astrom_photom.sh:#adam_scamp_comments# 
create_scamp_astrom_photom.sh:#adam_scamp_comments# #would like to know which detections are matched, also which MATCH_RESOL is chosen, might need to change these keys to get info:
create_scamp_astrom_photom.sh:#adam_scamp_comments# #HEADER_TYPE            NORMAL          # NORMAL or FOCAL_PLANE
create_scamp_astrom_photom.sh:#adam_scamp_comments# #VERBOSE_TYPE           NORMAL          # QUIET, NORMAL, LOG or FULL
create_scamp_astrom_photom.sh:#adam_scamp_comments# #FULLOUTCAT_TYPE
create_scamp_astrom_photom.sh:#adam_scamp_comments# #MERGEDOUTCAT_TYPE
create_scamp_astrom_photom.sh:#adam_scamp_comments# 
create_scamp_astrom_photom.sh:#adam_scamp_comments# #adam-tried# let's try changing the scamp poly degree to 4 (usually it's 3)
create_scamp_astrom_photom.sh:#adam_scamp_comments# #adam-tried# let's try changing the scamp poly degree to 2 (usually it's 3)
create_scamp_astrom_photom.sh:#old_scamp_comments# echo "${P_SCAMP} `${P_FIND} ../cat/ -name \*scamp.cat` \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -ASTRINSTRU_KEY FILTER,INSTRUM,CONFIG,ROTATION,MISSCHIP \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -CDSCLIENT_EXEC ${P_ACLIENT} \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -ASTREF_CATALOG ${STARCAT} \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -NTHREADS ${NPARA} ${MOSAICTYPE} \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -POSITION_MAXERR 5.0 \
create_scamp_astrom_photom.sh:#old_scamp_comments#            -SN_THRESHOLDS 20,100 "
create_scamp_astrom_photom.sh:#old_scamp_comments# 
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -MATCH_NMAX 10000 \
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -CROSSID_RADIUS 0.2 \
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -PIXSCALE_MAXERR 1.05 \
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -POSANGLE_MAXERR 0.4 \
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -SN_THRESHOLDS 1,100 \
create_scamp_astrom_photom.sh:#old_scamp_comments# #           -DISTORT_DEGREES 3
create_scamp_astrom_photom.sh:    echo "scamp call failed !! Exiting !!"
create_scamp_astrom_photom.sh:# scamp creates the headers in the directory where the catalogs
create_scamp_astrom_photom.sh:mv ${BONN_TARGET}_scamp.xml ../plots
create_scamp_astrom_photom.sh:# estimated by scamp:
create_scamp_astrom_photom.sh:  EXPTIME=`${P_LDACTOASC} -i ../cat/${IMAGE}_scamp.cat \
create_scamp_astrom_photom.sh:  FLXSCALE=`grep FLXSCALE ${IMAGE}_scamp.head | uniq |\
create_scamp_astrom_photom.sh:  PHOTINST=`grep PHOTINST ${IMAGE}_scamp.head | uniq |\
create_scamp_astrom_photom.sh:             flxscale_scamp[NR] = $3;
create_scamp_astrom_photom.sh:# into appropriate headers_scamp directories
create_scamp_astrom_photom.sh:            sed -e 's/FLXSCALE/FLSCALE /' ${NAME}_scamp.head |\
create_scamp_astrom_photom.sh:    mv ${CATBASE[$i]}*head ${CATDIR[$i]}/headers_scamp_${STARCAT}
create_scamp_photom.sh:# CVSID: $Id: create_scamp_photom.sh,v 1.12 2010-10-05 02:29:02 anja Exp $
create_scamp_photom.sh:# File Name:           create_scamp_photom.sh
create_scamp_photom.sh:#                      calibration of THELI sets with scamp V1.4.0-V1.4.6
create_scamp_photom.sh:# - I appended NTHREADS to the scamp command line
create_scamp_photom.sh:#   scamp catalogues
create_scamp_photom.sh:# 'scamp' is run with the '-MOSAIC_TYPE FIX_FOCALPLANE' option. 
create_scamp_photom.sh:# now I used the scamp value which is, however, scaled to a fixed
create_scamp_photom.sh:# magnitude (scamp config file). This value is not consistent with
create_scamp_photom.sh:# The directory names where scamp performs its actions carry the name 
create_scamp_photom.sh:    echo "    create_scamp_astrom_photom.sh"
create_scamp_photom.sh:    echo "    calibration of THELI sets with Emanuel Bertins scamp program. The"
create_scamp_photom.sh:    echo "    script was tested against scamp V1.4.6; The scamp program itself"
create_scamp_photom.sh:    echo "    header files in a \${SET}/headers_scamp_\${!#} directory (the \${!#}"
create_scamp_photom.sh:    echo "    directly be used for image co-addition.  To use the scamp headers"
create_scamp_photom.sh:    echo "    headers_scamp_..' option."
create_scamp_photom.sh:    echo "    astrometric catalogue supported by scamp."
create_scamp_photom.sh:    echo "    directory \${SET}/astrom_photom_scamp (of the first given image"
create_scamp_photom.sh:    echo "    (1) The script calls the Python script 'scampcat.py' which creates"
create_scamp_photom.sh:    echo "        scamp MEF exposure catalogues from the individual THELI chip "
create_scamp_photom.sh:    echo "    (2) scamp uses the configuration file 'scamp_astrom_photom.scamp'"
create_scamp_photom.sh:    echo "        which is set to define scamp astrometric contexts on the"
create_scamp_photom.sh:    echo "        in your reduction directory. If yes, it interprets it as a scamp"
create_scamp_photom.sh:    echo "        headers. In this case scamp is run with the "
create_scamp_photom.sh:    echo "    files that scamp needs/returns and the formats needed by"
create_scamp_photom.sh:    echo "    (1) Our THELI 'runs' are called 'astrometric contexts' in the scamp"
create_scamp_photom.sh:    echo "    (2) For each multi-chip exposure scamp expects ONE object catalogue"
create_scamp_photom.sh:    echo "        for each chip. If we would feed all individual chips into scamp"
create_scamp_photom.sh:    echo "    (3) scamp outputs ONE header file with all chips for each exposure."
create_scamp_photom.sh:    echo "    (4) scamp only gives a final flux scale w.r.t. a specified zeropoint."
create_scamp_photom.sh:    echo "        the absolute calibration within scamp."
create_scamp_photom.sh:    echo "        e.g. USNOB1 (THELI), but USNO-B1 (scamp)"
create_scamp_photom.sh:    echo "    (7) scamp crashes if images with a different number of chips "
create_scamp_photom.sh:# check whether we have the external 'scamp' and 'aclient' programs at all:
create_scamp_photom.sh:    echo "You need the external 'scamp' AND 'aclient' programs to"
create_scamp_photom.sh:# Test existence of image directory(ies) and create headers_scamp
create_scamp_photom.sh:      if [ -d /${!i}/${!j}/headers_scamp_photom_${STARCAT} ]; then
create_scamp_photom.sh:          rm -rf /${!i}/${!j}/headers_scamp_photom_${STARCAT}
create_scamp_photom.sh:      mkdir /${!i}/${!j}/headers_scamp_photom_${STARCAT}
create_scamp_photom.sh:  if [ ! -d /${!i}/${!j}/headers_scamp_${STARCAT} ]; then
create_scamp_photom.sh:# a astrom_photom_scamp subdirectory:
create_scamp_photom.sh:if [ ! -d astrom_photom_scamp_${STARCAT} ]; then
create_scamp_photom.sh:    echo "No scamp directory in /$1/$2/astrom_photom_scamp_${STARCAT}"; 
create_scamp_photom.sh:test -d "astrom_photom_scamp_${STARCAT}/cat_photom" && rm -rf astrom_photom_scamp_${STARCAT}/cat_photom
create_scamp_photom.sh:test -d "astrom_photom_scamp_${STARCAT}/headers_photom" && rm -rf astrom_photom_scamp_${STARCAT}/headers_photom
create_scamp_photom.sh:test -d "astrom_photom_scamp_${STARCAT}/plots_photom" && rm -rf astrom_photom_scamp_${STARCAT}/plots_photom
create_scamp_photom.sh:mkdir -p astrom_photom_scamp_${STARCAT}/cat_photom
create_scamp_photom.sh:mkdir astrom_photom_scamp_${STARCAT}/headers_photom
create_scamp_photom.sh:mkdir astrom_photom_scamp_${STARCAT}/plots_photom
create_scamp_photom.sh:cd astrom_photom_scamp_${STARCAT}/cat_photom
create_scamp_photom.sh:  FILES=`${P_FIND} /${!i}/${!j}/cat_scampIC/ -maxdepth 1 -name \*.cat`
create_scamp_photom.sh:        # If an old scamp catalogue exists the python call below
create_scamp_photom.sh:        test -f "./${IMAGE}_scamp.cat" && rm -f ./${IMAGE}_scamp.cat
create_scamp_photom.sh:        #python ${S_SCAMPCAT} ${CATS} ./${IMAGE}_scamp.cat
create_scamp_photom.sh:        echo "${CATS} ./${IMAGE}_scamp.cat" >> ${DIR}/catlist.txt_$$
create_scamp_photom.sh:        test -f "./${IMAGE}_scamp.ahead" && rm -f ./${IMAGE}_scamp.ahead
create_scamp_photom.sh:                       MISSED=`grep MISSCHIP ../cat/${IMAGE}_scamp.ahead | awk '{if(NR==1) print $2}' | sed "s/'//g" | awk 'BEGIN{FS="'${FS}'"}{print $1}' | awk '{if($1~/0'${i}'/) print "1"; else print "0"}'`
create_scamp_photom.sh:                       MISSED=`grep MISSCHIP ../cat/${IMAGE}_scamp.ahead | awk '{if(NR==1) print $2}' | sed "s/'//g" | awk 'BEGIN{FS="'${FS}'"}{print $1}' | awk '{if($1~/'${i}'/) print "1"; else print "0"}'`
create_scamp_photom.sh:                          if [ -f ../headers/${IMAGE}_scamp.head ]; then
create_scamp_photom.sh:                              AHEADFILE=../headers/${IMAGE}_scamp.head
create_scamp_photom.sh:                                  }' ${AHEADFILE} >> ${IMAGE}_scamp.ahead
create_scamp_photom.sh:                          echo "MISSCHIP= '${MISSCHIP}'" >> ./${IMAGE}_scamp.ahead
create_scamp_photom.sh:                          echo "END      "               >> ./${IMAGE}_scamp.ahead
create_scamp_photom.sh:                   	echo "${IMAGE} doesn't have a scamp catalog file!"
create_scamp_photom.sh:        elif [ -f "../headers/${IMAGE}_scamp.head" ]; then
create_scamp_photom.sh:            cp ../headers/${IMAGE}_scamp.head ./${IMAGE}_scamp.ahead
create_scamp_photom.sh:#/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py: merge single frame THELI files to a scamp MEF catalogue
create_scamp_photom.sh:#merges individual chip cats BASE_${i}${ending}.ldac to BASE_scamp.cat
create_scamp_photom.sh:# now call scamp:
create_scamp_photom.sh:## scamp mode settings
create_scamp_photom.sh:scamp_mode_instrum_star="-STABILITY_TYPE INSTRUMENT -ASTREF_CATALOG ${STARCAT} " #default
create_scamp_photom.sh:scamp_mode_exp_star="-STABILITY_TYPE EXPOSURE -ASTREF_CATALOG ${STARCAT} "
create_scamp_photom.sh:scamp_mode_instrum_ref="-STABILITY_TYPE INSTRUMENT -ASTREF_CATALOG FILE -ASTREFCENT_KEYS X_WORLD,Y_WORLD -ASTREFERR_KEYS ERRA_WORLD,ERRB_WORLD,ERRTHETA_WORLD -ASTREFMAG_KEY MAG_AUTO "
create_scamp_photom.sh:scamp_mode_exp_ref="-STABILITY_TYPE EXPOSURE -ASTREF_CATALOG FILE -ASTREFCENT_KEYS X_WORLD,Y_WORLD -ASTREFERR_KEYS ERRA_WORLD,ERRB_WORLD,ERRTHETA_WORLD -ASTREFMAG_KEY MAG_AUTO "
create_scamp_photom.sh:scamp_mode_use=${scamp_mode_instrum_star} #default
create_scamp_photom.sh:#adam-IMPORTANT# If BACKMASK images look like crap, then I should first try out scamp_mode_use=${scamp_mode_exp_star}
create_scamp_photom.sh:#adam-IMPORTANT# If still bad, then make a coadd.fits with only the good looking exposures, make a refcat from this, and use scamp_mode_use=${scamp_mode_exp_ref}
create_scamp_photom.sh:#MACS0416# scamp_mode_use=${scamp_mode_exp_ref}
create_scamp_photom.sh:echo "scamp_mode_use=" $scamp_mode_use
create_scamp_photom.sh:${P_SCAMP} `${P_FIND} ../cat_photom/ -name \*scamp.cat` \
create_scamp_photom.sh:        -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_photom.sh:        -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_photom.sh:        -ASTREF_WEIGHT 1 ${scamp_mode_use}
create_scamp_photom.sh:#refcat_scamp_call# ${P_SCAMP} `${P_FIND} ../cat_photom/ -name \*scamp.cat` \
create_scamp_photom.sh:#refcat_scamp_call#         -c ${CONF}/scamp_astrom_photom.scamp \
create_scamp_photom.sh:#refcat_scamp_call#         -PHOTINSTRU_KEY FILTER -ASTRINSTRU_KEY ASTINST,MISSCHIP \
create_scamp_photom.sh:#refcat_scamp_call#         -CDSCLIENT_EXEC ${P_ACLIENT} \
create_scamp_photom.sh:#refcat_scamp_call#         -NTHREADS ${NPARA} \
create_scamp_photom.sh:#refcat_scamp_call#         -XML_NAME ${BONN_TARGET}_scamp.xml \
create_scamp_photom.sh:#refcat_scamp_call#         -MAGZERO_INTERR 0.1 \
create_scamp_photom.sh:#refcat_scamp_call#         -MAGZERO_REFERR 0.1 \
create_scamp_photom.sh:#refcat_scamp_call#         -MATCH N \
create_scamp_photom.sh:#refcat_scamp_call#         -SN_THRESHOLDS 5,50 \
create_scamp_photom.sh:#refcat_scamp_call#         -MOSAIC_TYPE UNCHANGED \
create_scamp_photom.sh:#refcat_scamp_call#         -CROSSID_RADIUS 0.2 \
create_scamp_photom.sh:#refcat_scamp_call#         -STABILITY_TYPE EXPOSURE \
create_scamp_photom.sh:#refcat_scamp_call#         -DISTORT_DEGREES 3 \
create_scamp_photom.sh:#refcat_scamp_call#         -ASTREF_CATALOG FILE \
create_scamp_photom.sh:#refcat_scamp_call#         -ASTREFCENT_KEYS X_WORLD,Y_WORLD \
create_scamp_photom.sh:#refcat_scamp_call#         -ASTREFERR_KEYS ERRA_WORLD,ERRB_WORLD,ERRTHETA_WORLD \
create_scamp_photom.sh:#refcat_scamp_call#         -ASTREFMAG_KEY MAG_AUTO \
create_scamp_photom.sh:#refcat_scamp_call#         -ASTREF_WEIGHT 1
create_scamp_photom.sh:#adam-tmp# this is the standard operating procedure, remove all of the #usual_scamp_call# stuff before the next cluster 
create_scamp_photom.sh:#usual_scamp_call# is exactly the above, but with "-ASTREF_CATALOG ${STARCAT} \" rather than "-ASTREF_CATALOG FILE \"
create_scamp_photom.sh:#scamp_doesnt_recognize# -ASTREF_CATNAME /nfs/slac/g/ki/ki18/anja/SUBARU/compare_astrom_offsets/coadd_W-C-RC_only_5_good_ims/good5_W-C-RC_final.cat \
create_scamp_photom.sh:#scamp_doesnt_recognize# -ASTREFMAGERR_KEY MAGERR_AUTO
create_scamp_photom.sh:#adam_scamp_comments# THESE ARE THE NOTES I'VE ASSEMBLED WHILE TRYING TO FIX SCAMP ISSUES FOR MACS0416-24:
create_scamp_photom.sh:#adam_scamp_comments# NOTE: If I was going to try fixing these issues again, first I would look at/run the stuff in #old_scamp_comments# and the stuff in create_scamp_astrom_astrom_photom.sh FIRST, who knows, they might actually be there for a reason!
create_scamp_photom.sh:#adam_scamp_comments# 	THEN i would try out the suggestions below
create_scamp_photom.sh:#adam_scamp_comments# #orig#           -CROSSID_RADIUS 0.2 \
create_scamp_photom.sh:#adam_scamp_comments# #orig#           -PIXSCALE_MAXERR 1.02 \
create_scamp_photom.sh:#adam_scamp_comments# #def#           -CROSSID_RADIUS 2.0 \
create_scamp_photom.sh:#adam_scamp_comments# #def#           -PIXSCALE_MAXERR 1.20 \
create_scamp_photom.sh:#adam_scamp_comments# 
create_scamp_photom.sh:#adam_scamp_comments# # might want to try: ASTREF_WEIGHT change?
create_scamp_photom.sh:#adam_scamp_comments# # might want to try: ASTREF_CATALOG=USNO-B1 or ASTREF_BAND=REDDEST
create_scamp_photom.sh:#adam_scamp_comments# # might want to try: DISTORT_KEYS           X_IMAGE,Y_IMAGE,:AIRMASS
create_scamp_photom.sh:#adam_scamp_comments# # might want to try: MOSAIC_TYPE change?
create_scamp_photom.sh:#adam_scamp_comments# # might want to try: CROSSID_RADIUS or PIXSCALE_MAXERR or POSANGLE_MAXERR change?
create_scamp_photom.sh:#adam_scamp_comments# 
create_scamp_photom.sh:#adam_scamp_comments# #would like to know which detections are matched, also which MATCH_RESOL is chosen, might need to change these keys to get info:
create_scamp_photom.sh:#adam_scamp_comments# #HEADER_TYPE            NORMAL          # NORMAL or FOCAL_PLANE
create_scamp_photom.sh:#adam_scamp_comments# #VERBOSE_TYPE           NORMAL          # QUIET, NORMAL, LOG or FULL
create_scamp_photom.sh:#adam_scamp_comments# #FULLOUTCAT_TYPE
create_scamp_photom.sh:#adam_scamp_comments# #MERGEDOUTCAT_TYPE
create_scamp_photom.sh:#adam_scamp_comments# 
create_scamp_photom.sh:#adam_scamp_comments# #adam-tried# let's try changing the scamp poly degree to 4 (usually it's 3)
create_scamp_photom.sh:#adam_scamp_comments# #adam-tried# let's try changing the scamp poly degree to 2 (usually it's 3)
create_scamp_photom.sh:    echo "scamp call failed !! Exiting !!"
create_scamp_photom.sh:# scamp creates the headers in the directory where the catalogs are:
create_scamp_photom.sh:mv ${BONN_TARGET}_scamp.xml ../plots_photom
create_scamp_photom.sh:# estimated by scamp:
create_scamp_photom.sh:  EXPTIME=`${P_LDACTOASC} -i ../cat_photom/${IMAGE}_scamp.cat \
create_scamp_photom.sh:  FLXSCALE=`grep FLXSCALE ${IMAGE}_scamp.head | uniq |\
create_scamp_photom.sh:  PHOTINST=`grep PHOTINST ${IMAGE}_scamp.head | uniq |\
create_scamp_photom.sh:             flxscale_scamp[NR] = $3;
create_scamp_photom.sh:# into appropriate headers_scamp directories
create_scamp_photom.sh:                    if [ -f ${possible_dir}/headers_scamp_${STARCAT}/${headername}.head ]; then
create_scamp_photom.sh:                        OLDRZP=`grep RZP ${possible_dir}/headers_scamp_${STARCAT}/${headername}.head | awk '{print $3}'`
create_scamp_photom.sh:            sed -e 's/FLXSCALE/FLSCALE /' ${NAME}_scamp.head |\
create_scamp_photom.sh:    mv ${CATBASE[$i]}*head ${CATDIR[$i]}/headers_scamp_photom_${STARCAT}
create_stats_table.sh:# directory with ASTROMETRIX or scamp headers with relative
create_stats_table.sh:# with the inclusion of scamp different header directories
create_stats_table_chips.sh:# directory with ASTROMETRIX or scamp headers with relative
create_stats_table_chips.sh:# with the inclusion of scamp different header directories
do_Subaru_coadd_A2219.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_coadd_MACS0911.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}" 
do_Subaru_coadd_MACS0911.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_coadd_MACS0911.sh:  ### prep for scamp:
do_Subaru_coadd_MACS0911.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_coadd_MACS0911.sh:#./create_scamp_astrom_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_coadd_MACS2243_special.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}" 
do_Subaru_coadd_MACS2243_special.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_coadd_MACS2243_special.sh:#  ### prep for scamp:
do_Subaru_coadd_MACS2243_special.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_coadd_MACS2243_special.sh:#./create_scamp_astrom_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_coadd_template.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_coadd_template.sh:  if [ -d  ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat ] && [ ! -d  ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ];then
do_Subaru_coadd_template.sh:      echo "Move ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat to ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ? [y/n]"
do_Subaru_coadd_template.sh:	      mv ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_coadd_template.sh:              echo "the previous catalogs were generated only for scamp, "
do_Subaru_coadd_template_scamp.sh:### $Id: do_Subaru_coadd_template_scamp.sh,v 1.8 2009-01-16 22:19:13 anja Exp $
do_Subaru_coadd_template_scamp.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_coadd_template_scamp.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_coadd_template_scamp.sh:  ### prep for scamp:
do_Subaru_coadd_template_scamp.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_coadd_template_scamp.sh:  ./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_4batch.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_4batch.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_4batch.sh:	  if [ -d "${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp" ]; then
do_Subaru_register_4batch.sh:	      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_4batch.sh:	  if [ ! -d "${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp" ]; then
do_Subaru_register_4batch.sh:	      ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_4batch.sh:		  if [ ! -d "${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC" ]; then
do_Subaru_register_4batch.sh:		      mkdir ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_4batch.sh:		      cd ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_4batch.sh:		      ln -s ../cat_scamp/*.cat .
do_Subaru_register_4batch.sh:		  if [ -d "${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC" ]; then
do_Subaru_register_4batch.sh:		      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_4batch.sh:		  if [ ! -d "${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC" ]; then
do_Subaru_register_4batch.sh:		      mkdir ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_4batch.sh:		      cd ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_4batch.sh:		      ln -s ../cat_scamp/*.cat .
do_Subaru_register_4batch.sh:		      # echo "./parallel_manager.sh ./create_astromcats_scampIC_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS"
do_Subaru_register_4batch.sh:		      ./parallel_manager.sh ./create_astromcats_scampIC_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_4batch.sh:  ### prep for scamp:
do_Subaru_register_4batch.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_4batch.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_4batch.sh:	  ./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_4batch.sh:	  ./create_scamp_photom.sh ${LINE} ${THRESH} ${ASTROMETRYCAT}
do_Subaru_register_HDFN.sh:#ADDDATA="W-C-RC_2000-08-06_for_scamp W-C-IC_2000-08-06_for_scamp"
do_Subaru_register_HDFN.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_HDFN.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_HDFN.sh:#  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_HDFN.sh:#      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_HDFN.sh:  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_HDFN.sh:  ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_HDFN.sh:  ### prep for scamp:
do_Subaru_register_HDFN.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_HDFN.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_HDFN.sh:  ./create_scamp_astrom_photom_cp2.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS0018.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_MACS0018.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_MACS0018.sh:	#  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS0018.sh:	#      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_MACS0018.sh:	  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS0018.sh:	  ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS0018.sh:		  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ];
do_Subaru_register_MACS0018.sh:		      mkdir ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS0018.sh:		      cd ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS0018.sh:		      ln -s ../cat_scamp/*.cat .
do_Subaru_register_MACS0018.sh:		  #  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS0018.sh:		  #      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS0018.sh:		  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS0018.sh:		      ./parallel_manager.sh ./create_astromcats_scampIC_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS0018.sh:  ### prep for scamp:
do_Subaru_register_MACS0018.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_MACS0018.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_MACS0018.sh:	  ./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS0018.sh:	  ./create_scamp_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS1423.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_MACS1423.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_MACS1423.sh:#  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS1423.sh:#      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_MACS1423.sh:  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS1423.sh:  ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS1423.sh:  ### prep for scamp:
do_Subaru_register_MACS1423.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_MACS1423.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_MACS1423.sh:  ./create_scamp_distribute_headers.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS1427.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_MACS1427.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_MACS1427.sh:	#  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS1427.sh:	#      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_MACS1427.sh:	  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS1427.sh:	  ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS1427.sh:		  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ];
do_Subaru_register_MACS1427.sh:		      mkdir ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS1427.sh:		      cd ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS1427.sh:		      ln -s ../cat_scamp/*.cat .
do_Subaru_register_MACS1427.sh:		  #  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS1427.sh:		  #      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS1427.sh:		  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS1427.sh:		      ./parallel_manager.sh ./create_astromcats_scampIC_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS1427.sh:  ### prep for scamp:
do_Subaru_register_MACS1427.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_MACS1427.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_MACS1427.sh:	  ./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS1427.sh:	  ./create_scamp_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS1621.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_MACS1621.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_MACS1621.sh:	#  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS1621.sh:	#      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_MACS1621.sh:	  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_MACS1621.sh:	  ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS1621.sh:		  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS1621.sh:		      mkdir ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS1621.sh:		      cd ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS1621.sh:		      ln -s ../cat_scamp/*.cat .
do_Subaru_register_MACS1621.sh:#		    if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS1621.sh:#		        rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC
do_Subaru_register_MACS1621.sh:		  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scampIC ]; then
do_Subaru_register_MACS1621.sh:		      ./parallel_manager.sh ./create_astromcats_scampIC_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_MACS1621.sh:  ### prep for scamp:
do_Subaru_register_MACS1621.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_MACS1621.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_MACS1621.sh:	  ./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_Subaru_register_MACS1621.sh:	  ./create_scamp_photom.sh ${LINE} 20000 ${ASTROMETRYCAT}
do_Subaru_register_template.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_Subaru_register_template.sh:# need to keep track of the max number of NCHIPS for scamp
do_Subaru_register_template.sh:#  if [ -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_template.sh:#      rm -rf ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp
do_Subaru_register_template.sh:  if [ ! -d ${SUBARUDIR}/${cluster}/${filter}/SCIENCE/cat_scamp ]; then
do_Subaru_register_template.sh:  ./parallel_manager.sh ./create_astromcats_scamp_para.sh ${SUBARUDIR}/${cluster}/${filter} SCIENCE WEIGHTS
do_Subaru_register_template.sh:  ### prep for scamp:
do_Subaru_register_template.sh:###   this can be done with scamp for all filters simultaneously ###
do_Subaru_register_template.sh:    echo "This script supports only registration via scamp."
do_Subaru_register_template.sh:  ./create_scamp_astrom_photom.sh ${LINE} ${ASTROMETRYCAT}
do_coadd_batch.sh:#adam-tried# ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_coadd_batch.sh:ASTROMADD="_scamp_photom_${ASTROMETRYCAT}"
do_coadd_batchpixscale.sh:ASTROMADD="_scamp_photom_${ASTROMETRYCAT}"
do_median_compare_prep2.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
do_testsnratio.sh:   ASTROMADD="_scamp_${ASTROMETRYCAT}"
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
fgas_smoka-cp_aux_run.log:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:++ S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
fgas_smoka-cp_aux_run.log:#P_SCAMP=/u/ki/anja/software/bin/scamp
fgas_smoka-cp_aux_run.log:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
fgas_smoka-cp_aux_run.log:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
fgas_smoka-cp_aux_run.log:++ P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
files_SUBARUDIR_after3.log:-rw-r--r--  1 awright ki  53K Jul 22 15:29 scamp.xsl
files_SUBARUDIR_after3.log:drwxr-xr-x  2 awright ki 4.0K Sep  9 18:37 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-C-RC_headers_scamp_photom_2MASS
files_SUBARUDIR_after3.log:drwxr-xr-x  2 awright ki 4.0K Sep  9 18:37 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-C-RC_headers_scamp_2MASS
files_SUBARUDIR_after3.log:drwxr-xr-x  2 awright ki 8.0K Sep  9 18:38 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-J-B_headers_scamp_photom_2MASS
files_SUBARUDIR_after3.log:drwxr-xr-x  2 awright ki 8.0K Sep  9 18:38 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-J-B_headers_scamp_2MASS
files_SUBARUDIR_after3.log:drwxr-xr-x  2 awright ki  12K Sep  9 18:40 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-S-Z+_headers_scamp_photom_2MASS
files_SUBARUDIR_after3.log:drwxr-xr-x  2 awright ki  12K Sep  9 18:41 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-S-Z+_headers_scamp_2MASS
files_SUBARUDIR_after3.log:drwxr-xr-x  9 awright ki 4.0K Sep 11 03:52 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000astrom_photom_scamp_2MASS
files_SUBARUDIR_after7.log:-rw-r--r--  1 awright  53K Jul 22 15:29 scamp.xsl
files_SUBARUDIR_b4.log:-rw-r--r--  1 awright ki  53K Jul 22 15:29 scamp.xsl
files_SUBARUDIR_b4.log:drwxr-xr-x  2 awright ki 4.0K Sep  9 18:37 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-C-RC_headers_scamp_photom_2MASS
files_SUBARUDIR_b4.log:drwxr-xr-x  2 awright ki 4.0K Sep  9 18:37 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-C-RC_headers_scamp_2MASS
files_SUBARUDIR_b4.log:drwxr-xr-x  2 awright ki 8.0K Sep  9 18:38 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-J-B_headers_scamp_photom_2MASS
files_SUBARUDIR_b4.log:drwxr-xr-x  2 awright ki 8.0K Sep  9 18:38 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-J-B_headers_scamp_2MASS
files_SUBARUDIR_b4.log:drwxr-xr-x  2 awright ki  12K Sep  9 18:40 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-S-Z+_headers_scamp_photom_2MASS
files_SUBARUDIR_b4.log:drwxr-xr-x  2 awright ki  12K Sep  9 18:41 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000W-S-Z+_headers_scamp_2MASS
files_SUBARUDIR_b4.log:drwxr-xr-x  9 awright ki 4.0K Sep 11 03:52 backup_MACS0416-24_deg3-a-flagLT8-pflagLT2_imaflagLT1_THRESH26000astrom_photom_scamp_2MASS
fix_hdfn_flag.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
fix_hdfn_flag.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
fix_hdfn_flag.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
fix_hdfn_flag.py:        vecs['good_scamp'] = []
fix_hdfn_flag.py:                    vecs['good_scamp'].append(1)
fix_hdfn_flag.py:                    vecs['good_scamp'].append(0)
fix_hdfn_flag.py:            #print vecs['good_scamp']
fix_hdfn_flag.py:                            #if vecs['good_scamp'][cn]!= 1: 
fix_hdfn_flag.py:def check_scamp(cluster):
fix_hdfn_flag.py:        catlist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scamp/*.cat' )
fix_hdfn_flag.py:            file = f.replace('cat_scamp','cat_scampIC').replace('.cat','*.cat')
fix_hdfn_flag.py:                os.system('dfits ' + file.replace('/cat_scampIC','').replace('.cat','.fits') + ' | fitsort BADCCD')
fix_hdfn_flag.py:        catIClist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scampIC/*.cat' )
fix_hdfn_flag.py:def prep_scamp(info=None):
fix_hdfn_flag.py:def run_scamp(OBJNAME=None,fix=False):
fix_hdfn_flag.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where (checkedoff is null or checkedoff!="yes") and scampstatus is null group by c.objname order by rand()'  
fix_hdfn_flag.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where c.' + prefix + 'scampstatus is null and t.fix="yes" group by c.objname order by rand()'  
fix_hdfn_flag.py:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
fix_hdfn_flag.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
fix_hdfn_flag.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
fix_hdfn_flag.py:            commandst = 'update clusters_db set ' + prefix + 'scampstatus="started ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
fix_hdfn_flag.py:            #upperlimit = prep_scamp(dtop2['info'])
fix_hdfn_flag.py:                        command = 'rm -rf ' + os.environ['subdir'] + '/' + dtop2['objname'] + '/' + filter + '/SCIENCE/cat_scampIC'
fix_hdfn_flag.py:                    upperlimit = prep_scamp(dtop2['info'])
fix_hdfn_flag.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
fix_hdfn_flag.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="finished" where objname="' + dtop2['objname'] + '"'
fix_hdfn_flag.py:                commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
fix_hdfn_flag.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
fix_hdfn_flag.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
fix_hdfn_flag.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
fix_hdfn_flag.py:        vecs['good_scamp'] = []
fix_hdfn_flag.py:                    vecs['good_scamp'].append(1)
fix_hdfn_flag.py:                    vecs['good_scamp'].append(0)
fix_hdfn_flag.py:            print vecs['good_scamp']
fix_hdfn_flag.py:                if vecs['good_scamp'][i] != 1: 
fix_hdfn_flag.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
fix_hdfn_flag.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
fix_hdfn_flag.py:                                        for file_scamp in glob(filter_dir+ '/head*'):
fix_hdfn_flag.py:                                            command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
fix_hdfn_flag.py:    #run_scamp() ### can't run scamp from the batch computers b/c of internet!
fix_radec.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
fix_radec.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
fix_radec.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
fix_radec.py:        vecs['good_scamp'] = []
fix_radec.py:                    vecs['good_scamp'].append(1)
fix_radec.py:                    vecs['good_scamp'].append(0)
fix_radec.py:            print vecs['good_scamp']
fix_radec.py:                if vecs['good_scamp'][i] != 1: 
illumcorutils.py:                    SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
illumcorutils.py:                    SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
invert.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
invert.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
invert.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
invert.py:        vecs['good_scamp'] = []
invert.py:                    vecs['good_scamp'].append(1)
invert.py:                    vecs['good_scamp'].append(0)
invert.py:            print vecs['good_scamp']
invert.py:                if vecs['good_scamp'][i] != 1: 
match_prepostcoadd.py:        icheaderbuffer = wcsregionfile.FileBuffer('\n'.join(open('%s/headers_scamp_photom_%s/%s_%d.head' % (dir, headertype, imagebase, chipnum)).readlines()))
move_hdfn_40.py:            os.system('rm ' + os.environ['subdir'] + '/HDFN/' + filter + '/SCIENCE/cat_scamp*/' + res3[0] + '*') 
move_hdfn_40.py:            #os.system('rm ' + os.environ['subdir'] + '/HDFN/' + filter + '/SCIENCE/astrom_photom_scamp_SDSS-R6/'
ned.py:    command = 'scamp test.tab -c nedastrom -ASTREFCAT_NAME catalog.cat'
ned.py:    command = 'scamp '
pat.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
pat.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
pat.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
pat.py:        vecs['good_scamp'] = []
pat.py:                    vecs['good_scamp'].append(1)
pat.py:                    vecs['good_scamp'].append(0)
pat.py:            #print vecs['good_scamp']
pat.py:                            #if vecs['good_scamp'][cn]!= 1: 
pat.py:def check_scamp(cluster):
pat.py:        catlist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scamp/*.cat' )
pat.py:            file = f.replace('cat_scamp','cat_scampIC').replace('.cat','*.cat')
pat.py:                os.system('dfits ' + file.replace('/cat_scampIC','').replace('.cat','.fits') + ' | fitsort BADCCD')
pat.py:        catIClist = glob(os.environ['subdir'] + '/' + cluster + '/' + filter + '/SCIENCE/cat_scampIC/*.cat' )
pat.py:def prep_scamp(info=None):
pat.py:def run_scamp(OBJNAME=None,fix=False):
pat.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where (checkedoff is null or checkedoff!="yes") and scampstatus is null group by c.objname order by rand()'  
pat.py:            command='SELECT * from clusters_db c join ' + test + 'try_db t on c.objname=t.objname where c.' + prefix + 'scampstatus is null and t.fix="yes" group by c.objname order by rand()'  
pat.py:            commandst = 'update clusters_db set scampstatus="not ready" where objname="' + dtop2['objname'] + '"'
pat.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
pat.py:            logfile = os.environ['sne'] + '/scamp/' + dtop2['objname']
pat.py:            commandst = 'update clusters_db set ' + prefix + 'scampstatus="started ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
pat.py:            #upperlimit = prep_scamp(dtop2['info'])
pat.py:                        command = 'rm -rf ' + os.environ['subdir'] + '/' + dtop2['objname'] + '/' + filter + '/SCIENCE/cat_scampIC'
pat.py:                    upperlimit = prep_scamp(dtop2['info'])
pat.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
pat.py:                    commandst = 'update clusters_db set ' + prefix + 'scampstatus="finished" where objname="' + dtop2['objname'] + '"'
pat.py:                commandst = 'update clusters_db set ' + prefix + 'scampstatus="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
pat.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
pat.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
pat.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
pat.py:        vecs['good_scamp'] = []
pat.py:                    vecs['good_scamp'].append(1)
pat.py:                    vecs['good_scamp'].append(0)
pat.py:            print vecs['good_scamp']
pat.py:                if vecs['good_scamp'][i] != 1: 
pat.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
pat.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
pat.py:                                        for file_scamp in glob(filter_dir+ '/head*'):
pat.py:                                            command = 'ln -s ' +  file_scamp +  ' ' + out_filter_dir 
pat.py:    #run_scamp() ### can't run scamp from the batch computers b/c of internet!
prepare_coadd_swarp.sh:# the possibility to use scamp for astrometric calibration different
prepare_coadd_swarp_3s.sh:# the possibility to use scamp for astrometric calibration different
prepare_coadd_swarp_chips.sh:# the possibility to use scamp for astrometric calibration different
prepare_coadd_swarp_pretty.sh:# the possibility to use scamp for astrometric calibration different
progs.ini:#S_SCAMPCAT=${UTILSCRIPTS}/scampcat.py
progs.ini:S_SCAMPCAT=/nfs/slac/g/ki/ki05/anja/MEGAPRIME/software/THELI/ldacpipeline-0.12.33/scripts/Linux_64/scampcat.py
progs.ini:#P_SCAMP=/u/ki/anja/software/bin/scamp
progs.ini:#P_SCAMP=/afs/slac/g/ki/software/scamp/1.4.6/@sys/bin/scamp
progs.ini:P_SCAMP=/afs/slac/g/ki/software/local/bin/scamp.threads
s1.py:                    SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
s1.py:                    SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
s1.py:                            command = 'scamp ' + filtcatname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
scamp.py:                    status = test_scamp(obs[i]['file'])    
scamp.py:def test_scamp(file):
scamp.py:    config_scamp = os.environ['kpno'] + '/process_kpno/config_scamp' 
scamp.py:    command = 'scamp test.cat -c ' + config_scamp
scamp.py:        status = test_scamp(file)    
scamp.py:                status = test_scamp(file)
scamp.py:                    config_scamp = os.environ['kpno'] + '/process_kpno/config_scamp' 
scamp.py:                    xml_file = os.environ['kpno'] + '/' + run + '/' + night + '/' + snpath + '/scamp.xml'
scamp.py:                    command = 'scamp ' + reduce(lambda x,y: x + ' ' + y, [x+'.cat' for x in all_files])  + ' -c ' + config_scamp + ' -ASTREF_CATALOG 2MASS -ASTREF_WEIGHT 5 -ASTRINSTRU_KEY DETECTOR -MATCH_RESOL 5.0 -XML_NAME ' + xml_file # -ASTRINSTRU_KEY INSTRUME'
scamp.py:                    xml_file = os.environ['kpno'] + '/' + run + '/' + night + '/' + snpath + '/scamp.xml'
scamp.py:                    gh['scampmsg'] = msg
scamp.xsl:    <BUTTON type="button" style="background:#CCEECC; font-family: sans-serif; font-weight: bold;" onclick="showhideTable('scamp')">
scamp.xsl:    <TABLE class="sortable" id="scamp" BORDER="2" style="display: none">
scamp_code.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params   # it's not a ZERO!!!
scamp_code.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)sO*.head" % params
scamp_code.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)sO*.head" % params
scamp_code.py:        vecs['good_scamp'] = []
scamp_code.py:                vecs['good_scamp'].append(1)
scamp_code.py:                vecs['good_scamp'].append(0)
scamp_code.py:        print vecs['good_scamp']
scamp_code.py:            if vecs['good_scamp'][i] != 1: 
sdss_slr.fieldID.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
sdss_slr.py:                #os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
sdss_slr.save.py:                os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
simple_ic.py:#scamp: program that reads SExtractor catalogs (and their preliminary, approximate astrometric data) and computes astrometric and photometric solutions (these calibrations are saved in header files) for any arbitrary sequence of FITS images in an automatic way. Steps are:
simple_ic.py:                        SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
simple_ic.py:                        SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
simple_ic.py:        SDSS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params   # it's not a ZERO!!!
simple_ic.py:        TWOMASS = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_2MASS/%(BASE)s.head" % params
simple_ic.py:        NOMAD = "/%(path)s/%(directory)s/SCIENCE/headers_scamp_NOMAD*/%(BASE)s.head" % params
simple_ic.py:        vecs['good_scamp'] = []
simple_ic.py:                    vecs['good_scamp'].append(1)
simple_ic.py:                    vecs['good_scamp'].append(0)
simple_ic.py:            print 'fix_radec| vecs["good_scamp"]=',vecs["good_scamp"]
simple_ic.py:                if vecs['good_scamp'][i] != 1:
slr_kpn_new.simul.save.py:#from scamp import entryExit
slr_kpn_new.simul.save.py:            import scamp
slr_kpn_new.simul.save.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new.gof.py:#from scamp import entryExit
slr_kpno_new.gof.py:            import scamp
slr_kpno_new.gof.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new.py:#from scamp import entryExit
slr_kpno_new.py:            import scamp
slr_kpno_new.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new.savesimul.py:#from scamp import entryExit
slr_kpno_new.savesimul.py:            import scamp
slr_kpno_new.savesimul.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new.simul.py:#from scamp import entryExit
slr_kpno_new.simul.py:            import scamp
slr_kpno_new.simul.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new.simul.save.py:#from scamp import entryExit
slr_kpno_new.simul.save.py:            import scamp
slr_kpno_new.simul.save.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new.uband.py:#from scamp import entryExit
slr_kpno_new.uband.py:            import scamp
slr_kpno_new.uband.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new_simul.py:#from scamp import entryExit
slr_kpno_new_simul.py:            import scamp
slr_kpno_new_simul.py:            reload(scamp).add_image(image,snpath,filt,name,run)
slr_kpno_new_simul.save.py:#from scamp import entryExit
slr_kpno_new_simul.save.py:            import scamp
slr_kpno_new_simul.save.py:            reload(scamp).add_image(image,snpath,filt,name,run)
temp2.py:            os.system('mkdir -p ' + os.environ['sne'] + '/scamp/')
threesec.py:                    SDSS1 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)s.head" % params
threesec.py:                    SDSS2 = "/%(path)s/%(fil_directory)s/SCIENCE/headers_scamp_SDSS-R6/%(BASE)sO*.head" % params
threesec.py:                            command = 'scamp ' + filtcatname + " -SOLVE_PHOTOM N -ASTREF_CATALOG SDSS-R6 -CHECKPLOT_TYPE NONE -WRITE_XML N "  
transferMasks.py:                wcr.processConversion(source.regions, destination.name, destination.scampfile, destination.regionfile)
transferMasks.py:    scampfile, regionfile = wcr.findLocalFiles(filename, ext, regionDir)
transferMasks.py:    wcs = wcr.constructImageWCS(filename, scampfile)
transferMasks.py:    return Image(filename, header, wcs, regionfile, scampfile)
transferMasks.py:    def __init__(self, name, header = None, wcs = None, regionfile = None, scampfile = None):
transferMasks.py:        self.scampfile = scampfile
wcsconvertregions.py:    headerdir = glob.glob('%s/headers_scamp_photom_*' % science_dir)[0]
wcsconvertregions.py:    scampheaderfile = '%s/%s.head' % (headerdir, base)
wcsconvertregions.py:    return scampheaderfile, outputregionfile
wcsconvertregions.py:def constructImageWCS(image, scampheaderfile):
wcsconvertregions.py:    if os.path.exists(scampheaderfile):
wcsconvertregions.py:        scampheaderbuffer = FileBuffer(open(scampheaderfile).readlines()[:-1])
wcsconvertregions.py:        imageheader.fromTxtFile(scampheaderbuffer)
wcsconvertregions.py:def processConversion(regions, image, scampheaderfile, outputregionfile):
wcsconvertregions.py:    image_wcs = constructImageWCS(image, scampheaderfile)
wcsconvertregions.py:        scampheader, outputregion = findLocalFiles(image, extension, regionfiledir)
wcsconvertregions.py:        processConversion(regions, image, scampheader, outputregion)
