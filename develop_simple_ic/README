## files you may need to copy from

#pat's bonnpipeline dir: /u/ki/pkelly/pipeline/bonnpipeline/
#cp /u/ki/pkelly/pipeline/bonnpipeline/calc_tmpsave.py calc_tmpsave_from_pat_dir.py
#~/bonnpipeline$ grep "def get_sdss_cat" *.py
#calc_tmpsave.py:def get_sdss_cats(OBJNAME=None):
#calc_tmpsave_from_pat_dir.py:def get_sdss_cats(OBJNAME=None):
#~/bonnpipeline$ grep "def get_cats_ready" *.py
#calc_test_save.6.25.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.nov23.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.olddb.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.ppgplot.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.run.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.save.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.save1.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#calc_test_save.save2.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#fix_hdfn_flag.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
#pat.py:def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):


## Other helpful notes
/afs/slac.stanford.edu/u/ki/pkelly/pipeline/bonnpipeline/simple_ic.py  
data_path = '/nfs/slac/g/ki/ki18/anja/SUBARU/pat/MACS1226+21/'
import simple_ic
############# add files ############

gather_exposures('MACS1226+21') 

############# run SExtractor ############

get_astrom_run_sextract()

############# run fitting ############

(for example:  test_1226() )

match_OBJNAME(OBJNAME, FILTER, PPRUN)

which calls 

linear_fit(...)

that creates the matrices and then performs a sparse fit

############# assess fits ############

testgood() examines the quality of the fits and marks whether they need to be performed again,

if a successful fit, it calls sort_results which uses a bunch of different criteria to decide if a given fit is acceptable

############# apply correction ############

run_correction

if not a good fit, then uses find_nearby which is supposed to look for fits taken close in time


##########################
db2 = MySQLdb.connect(db='subaru', user='weaklensing', passwd='darkmatter', host='ki-sr01')
c = db2.cursor() 
c.execute(" DROP TABLE adam_illumination_db; ")
c.execute(" DROP TABLE adam_try_db; ")
c.execute(" DROP TABLE adam_fit_db; ")
c.execute(" CREATE TABLE adam_illumination_db LIKE illumination_db; ")
c.execute(" CREATE TABLE adam_try_db LIKE test_try_db; ")
c.execute(" CREATE TABLE adam_fit_db LIKE test_fit_db; ")
c.close()


## old version log
simple_ic.py v11: pat's old version from June 1st before I started messing with it
simple_ic.py v12: adam started cleaning up the code. Did this:
	1.) put the import statements at the top of the code and removed all of the unnecessary import statements within the functions themselves
	2.) included docstrings at the beginning of every function
	3.) removed trailing whitespace at the end of lines
simple_ic.py v13: adam changes
	1.)changed settings so they are different when pat runs it and when I run it
	2.) Made output directories consistent
	3.) deleted last few lines of do_astrom_run_sextract (can find them in fragments_removed.log if you want)
simple_ic.py v14: adam changes
	1.) continued adding in useful comments and documentation
	2.) also started to change how the test_try_db and test_fit_db databases are handled
	3.) made keys for my comments and scamp/swarp notes
...
stop doing this. it's POINTLESS! just run svn log simple_ic.py
